replicaBarrier
set replica_id [myReplica]
source $namd_config_file

if { [info exists iters_per_output ] == 0 } {
	set iters_per_output 1
}
if { [info exists num_equil_steps] == 0 } {
	set num_equil_steps 50000
}
if { [info exists num_equil_stages] == 0 } {
	set num_equil_stages 5
}
if { [info exists equil_stage_expon] == 0 } {
	set equil_stage_expon 1
}
if { [info exists restart] == 0 } {
	set restart no 
}
set equil_steps_per_stage [expr int($num_equil_steps / $num_equil_stages)]

# Find the image master
set rank [myReplica]
set num_replicas [numReplicas]
set num_swarms [expr $num_replicas / $num_images]
set image_rank [expr int($rank / $num_swarms)]
set image_master [expr $image_rank * $num_swarms]
set swarm_rank [expr $rank % $num_swarms]
# this is a factor ranging from 0.0 to 1.0 to scale the moving of images
set drift_constant 0.1
# set 1 to remove loops
set remove_loops 0
# set 1 to use randomized updating
set randomized_update 1

# Set pi
set pi 3.1415926535897931

if { $restart } {
	source [format $output_root.restart.tcl $replica_id]
} else {
	set i_job 0
	set i_iter 0
	set i_step 0
}
if { $i_job == 0 } {
	if [info exists bincoor_file] {
		bincoordinates [format $bincoor_file $image_rank]
	}
	if [info exists xsc_file] {
		extendedSystem [format $xsc_file $image_rank]
	}
	temperature $temperature
} else {
	bincoordinates [format $output_root.job%04d.restart.coor $replica_id [expr $i_job - 1]]
	binvelocities [format $output_root.job%04d.restart.vel $replica_id [expr $i_job - 1]]
	if [info exists xsc_file] {
		extendedSystem [format $output_root.job%04d.restart.xsc $replica_id [expr $i_job - 1]]
	}
}
set job_output_root [format $output_root.job%04d $replica_id $i_job]
outputname $job_output_root

# Random seed
seed [expr int(0*srand(int(100000*rand()) + 100*$replica_id) + 100000*rand())]

# Reads the colvars_##.conf file
# Swarms colvars will have a name that starts with "swarms_"
# Angle/dihedral colvars should start with "swarms_angle_"
proc read_colvars_conf { fname } {
	global swarm_colvars
	set fp [open $fname r]
	set lines [split [read $fp] "\n"]
	foreach line $lines {
		# Assign entries by colvar name
		set trimmed [string trim $line]
		set fields [split $trimmed]
		if {[lindex $fields 0] == "name" && [string range [lindex $fields 1] 0 5] == "swarms"} {
			set name_fields [split [lindex $fields 1] _]
			if {[lindex $name_fields 1] == "angle"} {
				set swarm_colvars([lindex $fields 1]) 1
			} else {
				set swarm_colvars([lindex $fields 1]) 0
			}
		}	
	}
	close $fp
}

proc update_initial_colvars { } {
  global swarm_colvars previous_colvars pi is_firsttime
  set is_firsttime 1
  foreach {key is_angle} [array get swarm_colvars] {
    set val [colvarvalue $key]
    if $is_angle {
      set previous_colvars($key) [list [expr sin($val * $pi / 180)] [expr cos($val * $pi / 180)]]
    } else {
      puts "\[Previous\]: $key = $val"
      set previous_colvars($key) $val
#       set previous_colvars_square($key) [expr $val * $val]
    }
  }
}

proc update_current_colvars { } {
  global swarm_colvars current_colvars pi rank is_firsttime
  global current_colvars_square
  global previous_colvars
  global displacement displacement_square
  if {$is_firsttime == 0} {
#     set previous_colvars $current_colvars
    foreach key [array names current_colvars] {
      set previous_colvars($key) $current_colvars($key)
    }
#     set previous_colvars_square $current_colvars_square
  }
  foreach { key is_angle } [array get swarm_colvars] {
    set val [colvarvalue $key]
    if $is_angle {
      set current_colvars($key) [list [expr sin($val * $pi / 180)] [expr cos($val * $pi / 180)]]
    } else {
      set previous_val $previous_colvars($key)
      puts "\[Previous\] \[Rank $rank\]: $key = $previous_val"
      puts "\[Current\] \[Rank $rank\]: $key = $val"
      set current_colvars($key) $val
      set current_colvars_square($key) [vecmult $val $val]
      # TODO: handle periodicity!
      set displacement($key) [vecsub $current_colvars($key) $previous_val]
      set displacement_square($key) [vecmult $displacement($key) $displacement($key)]
    }
  }
  if {$is_firsttime == 1} {
    set is_firsttime 0
  }
}

proc update_centers_from_drift { } {
	global drift
	foreach {key pos} [array get drift] {
		puts "Updating bias_$key"
		# Parse vector coordinates
		if { [llength $pos] > 1 } {
			set config "centers ( "
			for { set i 0 } { $i < [llength $pos] } { incr i } {
				if { $i != 0 } {
					append config ", "
				}
				append config [lindex $pos $i]
			}
			append config " )"
		} else {
			set config "centers $pos"
		}
		#puts "Config line => $config"
		colvarbias changeconfig bias_$key $config
	}
}

set colvars_file [format $colvars_file $image_rank]
colvarsConfig $colvars_file
read_colvars_conf $colvars_file

# collection_callback my_data received_data
proc binary_tree_callback { r nr offset skip data collection_callback process_callback } {
#     puts "$r: binary_tree_callback\n"
	global rank
	# Use the callback only when collecting the data
	foreach i { 1 2 } {
		set p [expr 2 * $r + $i]
		puts "p = $p"
		if { $p < $nr } {
            set recv_from [expr ($p + $offset) * $skip]
			set received [replicaRecv [expr ($p + $offset) * $skip]]
			puts "Receive data from $recv_from"
			set data [$collection_callback $data $received]
		}
	}
	# Now redistribute the collected and processed data
	if { $r } {
		if { ($r + 1) % 2 == 0 } {
			set p [expr ($r + 1) / 2 - 1]
		} else {
			set p [expr $r / 2 - 1]
		}
		set send_to [expr ($p + $offset) * $skip]
		puts "current rank: $r ; send data to $send_to"
		replicaSend $data [expr ($p + $offset) * $skip]
# 		puts "sent data: $data"
		set data [replicaRecv [expr ($p + $offset) * $skip]]
	# The head node can process now
	} elseif { [llength [info commands $process_callback]] > 0 } {
		set data [$process_callback $data]
	}
	foreach i { 1 2 } {
		set p [expr 2 * $r + $i]
		if { $p < $nr } {
			replicaSend $data [expr ($p + $offset) * $skip]
		}
	}
	return $data
}


proc prepare_message { } {
  global current_colvars current_colvars_square previous_colvars displacement displacement_square
  update_current_colvars
  return [list [array get current_colvars] [array get current_colvars_square] [array get previous_colvars] [array get displacement] [array get displacement_square]]
}

proc reparameterize_images { drifts } {
  # TODO: this code may be incompatible with Cartesian coordinates
  global num_images remove_loops
  array set drifts_array $drifts
  # build a list of origin images
  set old_images {}
  for {set i 0} {$i < $num_images} {incr i} {
    set tmp_image {}
    foreach {key val} $drifts_array($i) {
      lappend tmp_image {*}$val
    }
    lappend old_images $tmp_image
  }
  puts "====== Dump origin images ======"
  puts $old_images
  set new_images $old_images
  if {$remove_loops != 0} {
    # remove loops
    set new_images [remove_loops_simple {*}$new_images]
    puts "====== Images after removing loops ======"
    puts $new_images
    set num_images_removing_loops [llength $new_images]
    puts "====== Number of images after removing loops: $num_images_removing_loops ======"
  }
  set new_images [reparametrize $num_images {*}$new_images]
  #set new_images [reparametrize $num_images {*}$new_images]
  puts "====== Image after reparametrization (1) ======"
  puts $new_images
  # construct the array of new images
  set reparam [list]
  for {set i 0} {$i < [expr $num_images]} {incr i} {
    set current [list]
    array set current_image $drifts_array($i)
    set j 0
    foreach {key} [array names current_image] {
      set num_elem [llength $current_image($key)]
      if {$num_elem > 1} {
        set current [concat $current $key [list [lrange [lindex $new_images $i] [expr $j * $num_elem] [expr ($j + 1) * $num_elem - 1]]]]
      } else {
        set current [concat $current $key [list [lindex [lindex $new_images $i] $j]]]
      }
      incr j
    }
    set reparam [concat $reparam [list $i $current]]
  }
  puts $reparam
  return $reparam
}

# Set up the callbacks
proc sum_drifts { my_data received_data } {
  set my_data1 [lindex $my_data 0]
  set my_data2 [lindex $my_data 1]
  set my_data3 [lindex $my_data 2]
  set my_data4 [lindex $my_data 3]
  set my_data5 [lindex $my_data 4]
  array set new_pos   $my_data1
  array set new_pos2  $my_data2
  array set old_pos   $my_data3
  array set diff      $my_data4
  array set diff2     $my_data5
  set received_data1 [lindex $received_data 0]
  set received_data2 [lindex $received_data 1]
  set received_data3 [lindex $received_data 2]
  set received_data4 [lindex $received_data 3]
  set received_data5 [lindex $received_data 4]
  foreach {key val} $received_data1 {
    set new_pos($key)   [vecadd $new_pos($key)  $val]
  }
  foreach {key val} $received_data2 {
    set new_pos2($key)  [vecadd $new_pos2($key) $val]
  }
  foreach {key val} $received_data3 {
    set old_pos($key)   [vecadd $old_pos($key)  $val]
  }
  foreach {key val} $received_data4 {
    set diff($key)      [vecadd $diff($key)     $val]
  }
  foreach {key val} $received_data5 {
    set diff2($key)     [vecadd $diff2($key)    $val]
  }
  set l1 [array get new_pos]
  set l2 [array get new_pos2]
  set l3 [array get old_pos]
  set l4 [array get diff]
  set l5 [array get diff2]
  set result [list $l1 $l2 $l3 $l4 $l5]
  return $result
}

proc average_smooth_reparam { data } {
  global swarm_colvars image_rank num_images num_swarms pi i_iter target_iter drift_constant randomized_update
  array set new_pos  [lindex $data 0]
  array set new_pos2 [lindex $data 1]
  array set old_pos  [lindex $data 2]
  array set diff     [lindex $data 3]
  array set diff2    [lindex $data 4]
  foreach { key is_angle } [array get swarm_colvars] {
    if $is_angle {
      set new_pos($key) [expr 180 / $pi * atan2([lindex $new_pos($key) 0], [lindex $new_pos($key) 1])]
    } else {
      if {$randomized_update != 0} {
        # the variable name "drifts" is actually the new positions
        set scaling_factor [expr 1.0 - ((double($i_iter) + 1.0) / double($target_iter)) * 3.0 / 2.0]
        set scaling_factor [expr $scaling_factor > 0.0 ? $scaling_factor : 0.0]
        set mean_new_pos [vecscale $new_pos($key) [expr 1.0 / $num_swarms]]
        set mean_square_new_pos [vecscale $new_pos2($key) [expr 1.0 / $num_swarms]]
        set stddev_new_pos [vecscale [expr 1.0 * $scaling_factor] [vecsqrt [vecsub $mean_square_new_pos [vecmult $mean_new_pos $mean_new_pos]]]]
        set random_new_pos [vecscale $drift_constant [gaussian $mean_new_pos $stddev_new_pos]]
        # TODO: wrap!!
        set distance [vecscale $drift_constant [vecsub $random_new_pos [vecscale [expr 1.0 / $num_swarms] $old_pos($key)]]]
        set drifts($key) [vecadd [vecscale [expr 1.0 / $num_swarms] $old_pos($key)] $distance]
        puts "\[$key\] old_pos new_pos_no_random new_pos_proposed drifts_proposed scaling_factor"
        puts "\[$key\] $old_pos($key) $new_pos($key) $drifts($key) $distance $scaling_factor"
      } else {
        set mean_drifts [vecscale $diff($key) [expr $drift_constant / $num_swarms]]
        set drifts($key) [vecadd [vecscale [expr 1.0 / $num_swarms] $old_pos($key)] $mean_drifts]
        puts "\[$key\] old_pos new_pos_no_random new_pos_proposed drifts_proposed"
        puts "\[$key\] $old_pos($key) $new_pos($key) $drifts($key) $mean_drifts"
      }
    }
  }
  # Smooth and reparameterize
  array set new_images [binary_tree_callback $image_rank $num_images 0 $num_swarms [list $image_rank [array get drifts]] concat_images smooth_reparam_callback]
  # Only redistribute the correct image
  return $new_images($image_rank)
}
proc concat_images { my_data received_data } {
	return [concat $my_data $received_data]
}
proc smooth_reparam_callback { data } {
# 	global smooth_param
# 	set data [smooth_images $data $smooth_param]
	set data [reparameterize_images $data]
	return $data
}

# Swarm iterations
langevinTemp $temperature
firsttimestep $i_step
# prepare the colvars at step 0
run 0
update_initial_colvars
set target_iter [expr $i_iter + $num_iter]
while {$i_iter < $target_iter} {
	# Determine if coordinates will be written this step
	set write_output [expr ($i_iter % $iters_per_output) == 0 || $i_iter == ($target_iter - 1)]

	# Turn of the biases before the swarms
	foreach { key } [array names drift] {
		colvarbias changeconfig bias_$key "forceConstant 0.0"
	}

	# Run the individual swarms
	colvarfreq $num_swarm_steps
	run $num_swarm_steps
	incr i_step $num_swarm_steps

	# Output the swarms conformations	
	if { $write_output } {
		set output_base [format "$job_output_root.drift%04d.iter%04d" $replica_id $i_iter]
		output $output_base
	}
	replicaBarrier

	# Use a binary tree to distribute drift to image masters, and again to smooth/reparam
	set message [prepare_message]
	array set drift [binary_tree_callback $swarm_rank $num_swarms $image_master 1 $message sum_drifts average_smooth_reparam]

	# Equilibrate new images
	update_centers_from_drift
	colvarfreq $equil_steps_per_stage
	for { set i 1 } { $i <= $num_equil_stages } { incr i } {
		set current_force_constant [expr pow(1.0 - ($num_equil_stages. - $i) / $num_equil_stages, $equil_stage_expon) * $swarms_force_constant]
		foreach { key } [array names drift] {
			puts "Updating bias_$key"
			colvarbias changeconfig bias_$key "forceConstant $current_force_constant"
		}
		run $equil_steps_per_stage
		incr i_step $equil_steps_per_stage
	}

	# Output the new images and Tcl restart file
	set output_base [format "$job_output_root.image%04d.iter%04d" $image_rank $i_iter]
	incr i_iter
	if { $write_output } {
		output $output_base
		set rfile [open [format $output_root.restart.tcl $replica_id] "w"]
		puts $rfile [list set i_job [expr $i_job + 1]]
		puts $rfile [list set i_iter $i_iter]
		puts $rfile [list set i_step $i_step]
		puts $rfile [list colvarsInput $job_output_root.restart.colvars.state]
		close $rfile
	}
}
